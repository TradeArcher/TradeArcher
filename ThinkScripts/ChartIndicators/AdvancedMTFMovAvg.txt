#Advanced Multi-Timeframe Moving Average Chart Indicator
#Author: TradeArcher2020
#Version: 0.1
#Date Created: 12/13/2020

input MovingAverageType = {default Simple, Exponential, Hull, Wilders, Weighted};
input PriceType = {default Close, Open, High, Low};
input TimeFrame = {default CURRENT, MIN, TWOMIN, THREEMIN, FOURMIN, FIVEMIN, TENMIN, FIFTEENMIN, TWENTYMIN, THIRTYMIN, HOUR, TWOHOURS, THREEHOURS, FOURHOURS, DAY, TWODAYS, THREEDAYS, FOURDAYS, WEEK, MONTH, QUARTER, YEAR};
input Length = 26;
input Displace = 0;
input PricePercentAboveMA = 20.0;
input PricePercentBelowMA = 20.0;
input ShowSignals = no;

def aggPeriod;
switch (TimeFrame) {
    case MIN:
        aggPeriod = AggregationPeriod.MIN;
    case TWOMIN:
        aggPeriod = AggregationPeriod.TWO_MIN;
    case THREEMIN:
        aggPeriod = AggregationPeriod.THREE_MIN;
    case FOURMIN:
        aggPeriod = AggregationPeriod.FOUR_MIN;
    case FIVEMIN:
        aggPeriod = AggregationPeriod.FIVE_MIN;
    case TENMIN:
        aggPeriod = AggregationPeriod.TEN_MIN;
    case FIFTEENMIN:
        aggPeriod = AggregationPeriod.FIFTEEN_MIN;
    case TWENTYMIN:
        aggPeriod = AggregationPeriod.TWENTY_MIN;
    case THIRTYMIN:
        aggPeriod = AggregationPeriod.THIRTY_MIN;
    case HOUR:
        aggPeriod = AggregationPeriod.HOUR;
    case TWOHOURS:
        aggPeriod = AggregationPeriod.TWO_HOURS;
    case FOURHOURS:
        aggPeriod = AggregationPeriod.FOUR_HOURS;
    case DAY:
        aggPeriod = AggregationPeriod.DAY;
    case TWODAYS:
        aggPeriod = AggregationPeriod.TWO_DAYS;
    case THREEDAYS:
        aggPeriod = AggregationPeriod.THREE_DAYS;
    case FOURDAYS:
        aggPeriod = AggregationPeriod.FOUR_DAYS;
    case WEEK:
        aggPeriod = AggregationPeriod.WEEK;
    case MONTH:
        aggPeriod = AggregationPeriod.MONTH;
    case QUARTER:
        aggPeriod = AggregationPeriod.QUARTER;
    case YEAR:
        aggPeriod = AggregationPeriod.YEAR;
    default:
        aggPeriod = GetAggregationPeriod();
}

#we do this to prevent error when trying to plot a lower timeFrame since that is not supported
def timePeriod = if(aggPeriod < GetAggregationPeriod(), GetAggregationPeriod(), aggPeriod);

def price;
switch (PriceType) {
    case Close:
        price = close(period = timePeriod);
    case Open:
        price = open(period = timePeriod);
    case High:
        price = high(period = timePeriod);
    case Low:
        price = low(period = timePeriod);
}

def ma;
switch (MovingAverageType) {
    case Simple:
        ma = SimpleMovingAvg(price = price, length = Length, displace = Displace);
    case Exponential:
        ma = MovAvgExponential(price = price, length = Length, displace = Displace);
    case Hull:
        ma = HullMovingAvg(price = price, length = Length, displace = Displace);
    case Wilders:
        ma = WildersAverage(data = price, length = Length);
    case Weighted:
        ma = MovAvgWeighted(price = price, length = Length, displace = Displace);
}

def currentPrice;
switch (PriceType) {
    case Close:
        currentPrice = close;
    case Open:
        currentPrice = open;
    case High:
        currentPrice = high;
    case Low:
        currentPrice = low;
}

def priceMAPercentDifference = ((currentPrice - ma) / ma) * 100;

def isAboveSignalLine = (priceMAPercentDifference >= PricePercentAboveMA);
def isBelowSignalLine = (-priceMAPercentDifference >= PricePercentBelowMA);

#define colors: {default BLUE, MAGENTA, CYAN, PINK, LIGHT_GRAY, ORANGE, RED, GREEN, LIGHT_GREEN, GRAY, WHITE, YELLOW, LIME};
plot movingAvg = ma;
movingAvg.DefineColor("Normal", COLOR.BLUE);
movingAvg.DefineColor("AboveSignal", COLOR.LIGHT_RED);
movingAvg.DefineColor("BelowSignal", COLOR.LIME);
#movingAvg.Sethiding(!(percentAboveMA >= PricePercentAboveMA));
movingAvg.AssignValueColor(color = (if isAboveSignalLine then movingAvg.Color("AboveSignal") else if isBelowSignalLine then movingAvg.Color("BelowSignal") else movingAvg.Color("Normal")));
#movingAvg.enableApproximation();

plot aboveSignal = if(ShowSignals, isAboveSignalLine, no);
aboveSignal.SetPaintingStrategy(paintingStrategy = PaintingStrategy.BOOLEAN_WEDGE_DOWN);
aboveSignal.SetDefaultColor(COLOR.LIGHT_RED);

plot belowSignal = if(ShowSignals, isBelowSignalLine, no);
belowSignal.SetPaintingStrategy(paintingStrategy = PaintingStrategy.BOOLEAN_WEDGE_UP);
belowSignal.SetDefaultColor(COLOR.LIME);