#Time Relative Volume Chart Indicator
#Author: TradeArcher2020
#Version: 0.5
#Date Created: 06/21/2021

#hint: Calculates the simple average of the volume for the same candle over multiple days using the PeriodLookBack for the number of days along with a moving average of the volume, then it changes the color of the candle if the volume exceeds both the time of day relative volume and the movinng average for the volume.

input PeriodLookBack = 21; #hint: PeriodLookBack: The number of days back used to calculate the average.
input ShowVolumeHistogram = no; #hint: ShowVolumeHistogram: Whether or not to show the volume histogram bars.
input PercentAboveAverageForSignal = 300;
input ChangeCandleColors = yes; #hint: toggles whether or not to change the candle colors on abnormal volume
input ShowSignalArrows = no; #hint: toggles abnormal volume up/down arrows
input MinVolumeLevel = 50000;

declare hide_on_daily;
declare on_volume;
declare real_size;

DefineGlobalColor("HighVolumeUp", Color.CYAN);
DefineGlobalColor("HighVolumeDown", Color.YELLOW);

def avgVol = MovingAverage(AverageType.EXPONENTIAL, volume, 21);

plot AverageVolume = avgVol;
AverageVolume.SetDefaultColor(Color.CYAN);

def dayStart = 0000;

def currentAggregationPeriod = GetAggregationPeriod();

def barsPerDay = 86400000 / currentAggregationPeriod;

def foldLength = PeriodLookBack * barsPerDay;

def barTime = Floor((SecondsFromTime(dayStart) * 1000) / currentAggregationPeriod);

def volumeAtTimeSum = 
(fold ix = 0 to PeriodLookBack with vSum do vSum + 
    (fold ixx = 0 to barsPerDay with subVSum do
         subVSum + (if(GetValue(barTime, ((ix+1)*(ixx+1))-1) == barTime, GetValue(volume, ((ix+1)*(ixx+1)-1)), 0))));

def avgVolumeAtTime = volumeAtTimeSum / PeriodLookBack;

#plot TimeRelativeVolumeSum = volumeAtTimeSum;
#TimeRelativeVolumeSum.SetDefaultColor(Color.WHITE);

plot TimeRelativeVolume = avgVolumeAtTime;
TimeRelativeVolume.SetDefaultColor(Color.WHITE);

def highVolumeSignalFactor = (PercentAboveAverageForSignal / 100) + 1;

def highVolumeLevel = avgVolumeAtTime * highVolumeSignalFactor;

plot HighVolumeSignal = if(volume >= highVolumeLevel, highVolumeLevel, Double.NaN);
HighVolumeSignal.SetPaintingStrategy(paintingStrategy = PaintingStrategy.TRIANGLES);
HighVolumeSignal.SetDefaultColor(Color.LIME);
HighVolumeSignal.SetLineWeight(1);



plot VolumeSignal = volume;
VolumeSignal.SetPaintingStrategy(paintingStrategy = PaintingStrategy.HISTOGRAM);
VolumeSignal.SetDefaultColor(Color.VIOLET);
VolumeSignal.SetHiding(!ShowVolumeHistogram);

def percentOfAvg = Round(((volume - avgVolumeAtTime)/ avgVolumeAtTime) * 100, 0);

def isGreen = close >= open;

AddLabel(yes, "Bar Avg Vol: " + avgVolumeAtTime + (if (volume >= avgVolumeAtTime) then " (" + percentOfAvg + "% > AVG)" else ""), if (volume >= highVolumeLevel) then Color.GREEN else if (volume > avgVolumeAtTime) then Color.YELLOW else Color.LIGHT_GRAY);

AssignPriceColor(if ChangeCandleColors then if HighVolumeSignal and volume > AverageVolume then if isGreen then GlobalColor("HighVolumeUp") else  GlobalColor("HighVolumeDown") else Color.CURRENT else Color.CURRENT );

plot MinVolLine = MinVolumeLevel;
