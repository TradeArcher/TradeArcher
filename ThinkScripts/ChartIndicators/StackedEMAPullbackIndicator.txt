#Stacked EMA Pullback Indicator
#Author: TradeArcher2020
#Version: 0.4
#Date Created: 01/17/2021

input includePremarket = yes;

def isWithinTradingHours = If (includePreMarket, yes, RegularTradingStart(GetYYYYMMDD()) < GetTime() and  RegularTradingEnd(GetYYYYMMDD()) > GetTime());

#Begin Strategy Specific Inputs
input emaPeriod1 = 8;
input emaPeriod2 = 21;
input emaPeriod3 = 34;
input emaPeriod4 = 55;
input emaPeriod5 = 89;
input emaPeriod6 = 144;
input hullMAPeriod = 5;

input price = {default "Close", "Low", "CandleBodyLow"};
input statsLookAhead = 5;

input recentHighPeriod = 5;
input showBubbles = yes;
input minBubbleExpansion = 3;
input showBuySignals = no;
input showBuyCrossUpSignal = no;
input enableAlerts = no;

def buyPrice; 
switch (price) {
case "Close":
    buyPrice = close;
case "Low":
    buyPrice = low;
case "CandleBodyLow":
    buyPrice = if(close < open, close, open);
}
def sellPrice = close;
def bn = BarNumber();
def currentBar = HighestAll(if !IsNaN(close) then bn else Double.NaN);
#def emaLevel = if(IsNaN(close[-1]), if(!IsNaN(emaLevel[1]) and !IsNaN(close[10]), emaLevel[1], 1), Double.NaN);
#plot HighATR = highAtrLevel;
#HighATR.SetDefaultColor(color = Color.RED);
#HighATR.SetStyle(Curve.SHORT_DASH);
#HighATR.SetPaintingStrategy(paintingStrategy = PaintingStrategy.HORIZONTAL);

#AddChartBubble(IsNaN(HighATR[11]) and !IsNaN(HighATR[10]), HighATR, "ATR High", color = Color.RED);
#def isExpansion = if(IsNaN(HighATR[11]) and !IsNaN(HighATR[10]), yes, no);

#End Strategy Specific Inputs

#***********************************************************************
#Begin Strategy specific code

DefineGlobalColor("ShortEMA", Color.CYAN);
DefineGlobalColor("MedianEMA", Color.WHITE);
DefineGlobalColor("SupportEMA", Color.LIME);
DefineGlobalColor("StopLossEMA", Color.DARK_RED);
DefineGlobalColor("BuySignal", Color.LIME);
DefineGlobalColor("BuyCrossUpSignal", Color.LIGHT_GREEN);
DefineGlobalColor("SellSignal", Color.LIME);

DefineGlobalColor("EMA1", Color.CYAN);
DefineGlobalColor("EMA2", Color.WHITE);
DefineGlobalColor("EMA3", Color.LIME);
DefineGlobalColor("EMA4", Color.MAGENTA);
DefineGlobalColor("EMA5", Color.PLUM);
DefineGlobalColor("EMA6", Color.VIOLET);

DefineGlobalColor("HullUp", Color.UPTICK);
DefineGlobalColor("HullDown", Color.DOWNTICK);
DefineGlobalColor("HullNeutral", Color.LIGHT_GRAY);

plot ema1 = MovAvgExponential(length = emaPeriod1);
ema1.SetDefaultColor(GlobalColor("EMA1"));
def ema1Level = if(IsNaN(close[-1]), if(!IsNaN(ema1Level[1]) and !IsNaN(close[minBubbleExpansion+0]), ema1Level[1], ema1), Double.NaN);
plot LastEMA1 = ema1Level;
LastEMA1.SetDefaultColor(GlobalColor("EMA1"));
LastEMA1.SetPaintingStrategy(paintingStrategy = PaintingStrategy.HORIZONTAL);
LastEMA1.SetHiding(!showBubbles);
AddChartBubble(showBubbles and IsNaN(LastEMA1[minBubbleExpansion+1]) and !IsNaN(LastEMA1[minBubbleExpansion+0]), LastEMA1, emaPeriod1 + " EMA", GlobalColor("EMA1"));

plot ema2 = MovAvgExponential(length = emaPeriod2);
ema2.SetDefaultColor(GlobalColor("EMA2"));
def ema2Level = if(IsNaN(close[-1]), if(!IsNaN(ema2Level[1]) and !IsNaN(close[minBubbleExpansion+7]), ema2Level[1], ema2), Double.NaN);
plot LastEMA2 = ema2Level;
LastEMA2.SetDefaultColor(GlobalColor("EMA2"));
LastEMA2.SetPaintingStrategy(paintingStrategy = PaintingStrategy.HORIZONTAL);
LastEMA2.SetHiding(!showBubbles);
AddChartBubble(showBubbles and IsNaN(LastEMA2[minBubbleExpansion+8]) and !IsNaN(LastEMA2[minBubbleExpansion+7]), LastEMA2, emaPeriod2 + " EMA", GlobalColor("EMA2"));

plot ema3 = MovAvgExponential(length = emaPeriod3);
ema3.SetDefaultColor(GlobalColor("EMA3"));
def ema3Level = if(IsNaN(close[-1]), if(!IsNaN(ema3Level[1]) and !IsNaN(close[minBubbleExpansion+14]), ema3Level[1], ema3), Double.NaN);
plot LastEMA3 = ema3Level;
LastEMA3.SetDefaultColor(GlobalColor("EMA3"));
LastEMA3.SetPaintingStrategy(paintingStrategy = PaintingStrategy.HORIZONTAL);
LastEMA3.SetHiding(!showBubbles);
AddChartBubble(showBubbles and IsNaN(LastEMA3[minBubbleExpansion+15]) and !IsNaN(LastEMA3[minBubbleExpansion+14]), LastEMA3, emaPeriod3 + " EMA", GlobalColor("EMA3"));

plot ema4 = MovAvgExponential(length = emaPeriod4);
ema4.SetDefaultColor(GlobalColor("EMA4"));
def ema4Level = if(IsNaN(close[-1]), if(!IsNaN(ema4Level[1]) and !IsNaN(close[minBubbleExpansion+21]), ema4Level[1], ema4), Double.NaN);
plot LastEMA4 = ema4Level;
LastEMA4.SetDefaultColor(GlobalColor("EMA4"));
LastEMA4.SetPaintingStrategy(paintingStrategy = PaintingStrategy.HORIZONTAL);
LastEMA4.SetHiding(!showBubbles);
AddChartBubble(showBubbles and IsNaN(LastEMA4[minBubbleExpansion+22]) and !IsNaN(LastEMA1[minBubbleExpansion+21]), LastEMA4, emaPeriod4 + " EMA", GlobalColor("EMA4"));

plot ema5 = MovAvgExponential(length = emaPeriod5);
ema5.SetDefaultColor(GlobalColor("EMA5"));
def ema5Level = if(IsNaN(close[-1]), if(!IsNaN(ema5Level[1]) and !IsNaN(close[minBubbleExpansion+28]), ema5Level[1], ema5), Double.NaN);
plot LastEMA5 = ema5Level;
LastEMA5.SetDefaultColor(GlobalColor("EMA5"));
LastEMA5.SetPaintingStrategy(paintingStrategy = PaintingStrategy.HORIZONTAL);
LastEMA5.SetHiding(!showBubbles);
AddChartBubble(showBubbles and IsNaN(LastEMA5[minBubbleExpansion+29]) and !IsNaN(LastEMA5[minBubbleExpansion+28]), LastEMA5, emaPeriod5 + " EMA", GlobalColor("EMA5"));

plot ema6 = MovAvgExponential(length = emaPeriod6);
ema6.SetDefaultColor(GlobalColor("EMA6"));
def ema6Level = if(IsNaN(close[-1]), if(!IsNaN(ema6Level[1]) and !IsNaN(close[minBubbleExpansion+36]), ema6Level[1], ema6), Double.NaN);
plot LastEMA6 = ema6Level;
LastEMA6.SetDefaultColor(GlobalColor("EMA6"));
LastEMA6.SetPaintingStrategy(paintingStrategy = PaintingStrategy.HORIZONTAL);
LastEMA6.SetHiding(!showBubbles);
AddChartBubble(showBubbles and IsNaN(LastEMA6[minBubbleExpansion+37]) and !IsNaN(LastEMA6[minBubbleExpansion+36]), LastEMA6, emaPeriod6 + " EMA", GlobalColor("EMA6"));

plot hullMA = HullMovingAvg(length = hullMAPeriod);
def hullMADirection = if hullMA[1] < hullMA then 1 else if hullMA[1] > hullMA then -1 else 0;
hullMA.SetStyle(Curve.MEDIUM_DASH);
hullMA.AssignValueColor(if hullMADirection > 0 then GlobalColor("HullUp") else if hullMADirection < 0 then GlobalColor("HullDown") else GlobalColor("HullNeutral"));

def areEMAsStacked = ema1 > ema2 and ema2 > ema3 and ema3 > ema4 and ema4 > ema5 and ema5 > ema6;

#Begin Stats
def staysAboveEma2 = fold ix1 = 1 to statsLookAhead with b1 = no do if(b1 or GetValue(buyPrice, -ix1) < GetValue(ema1, -ix1), yes, no);
def ema1Support = if(areEMAsStacked and buyPrice < ema1 and buyPrice > ema2 and if(IsNaN(staysAboveEma2), no, staysAboveEma2) and buyPrice[-statsLookAhead] > ema1 within statsLookAhead bars and !(buyPrice[-statsLookAhead] < ema2) within statsLookAhead bars, 1, 0);
def ema1SupportCount = TotalSum(ema1Support);
AddLabel(yes, emaPeriod2 + " EMA Support Count: " + ema1SupportCount, GlobalColor("EMA2"));


def staysAboveEma3 = fold ix2 = 1 to statsLookAhead with b2 = no do if(b2 or GetValue(buyPrice, -ix2) < GetValue(ema2, -ix2), yes, no);
def ema2Support = if(areEMAsStacked and buyPrice < ema2 and buyPrice > ema3 and if(IsNaN(staysAboveEma3), no, staysAboveEma3) and buyPrice[-statsLookAhead] > ema2 within statsLookAhead bars and !(buyPrice[-statsLookAhead] < ema3) within statsLookAhead bars, 1, 0);
def ema2SupportCount = TotalSum(ema2Support);
AddLabel(yes, emaPeriod3 + " EMA Support Count: " + ema2SupportCount, GlobalColor("EMA3"));


def staysAboveEma4 = fold ix3 = 1 to statsLookAhead with b3 = no do if(b3 or GetValue(buyPrice, -ix3) < GetValue(ema3, -ix3), yes, no);
def ema3Support = if(areEMAsStacked and buyPrice < ema3 and buyPrice > ema4 and if(IsNaN(staysAboveEma4), no, staysAboveEma4) and buyPrice[-statsLookAhead] > ema3 within statsLookAhead bars and !(buyPrice[-statsLookAhead] < ema4) within statsLookAhead bars, 1, 0);
def ema3SupportCount = TotalSum(ema3Support);
AddLabel(yes, emaPeriod4 + " EMA Support Count: " + ema3SupportCount, GlobalColor("EMA4"));


def staysAboveEma5 = fold ix4 = 1 to statsLookAhead with b4 = no do if(b4 or GetValue(buyPrice, -ix4) < GetValue(ema4, -ix4), yes, no);
def ema4Support = if(areEMAsStacked and buyPrice < ema4 and buyPrice > ema5 and if(IsNaN(staysAboveEma5), no, staysAboveEma5) and buyPrice[-statsLookAhead] > ema4 within statsLookAhead bars and !(buyPrice[-statsLookAhead] < ema5) within statsLookAhead bars, 1, 0);
def ema4SupportCount = TotalSum(ema4Support);
AddLabel(yes, emaPeriod5 + " EMA Support Count: " + ema4SupportCount, GlobalColor("EMA5"));


def staysAboveEma6 = fold ix5 = 1 to statsLookAhead with b5 = no do if(b5 or GetValue(buyPrice, -ix5) < GetValue(ema5, -ix5), yes, no);
def ema5Support = if(areEMAsStacked and buyPrice < ema5 and buyPrice > ema5 and if(IsNaN(staysAboveEma6), no, staysAboveEma6) and buyPrice[-statsLookAhead] > ema5 within statsLookAhead bars and !(buyPrice[-statsLookAhead] < ema6) within statsLookAhead bars, 1, 0);
def ema5SupportCount = TotalSum(ema5Support);
AddLabel(yes, emaPeriod6 + " EMA Support Count: " + ema5SupportCount, GlobalColor("EMA6"));

def keySupportEMA;
def keySupportEMALower;
def keySupportEMAUpper;
if (ema1supportCount >= ema2SupportCount and ema1supportCount >= ema3SupportCount and ema1supportCount >= ema4SupportCount and ema1supportCount >= ema5SupportCount) then {
keySupportEMA = emaPeriod2;
keySupportEMALower = if(areEMAsStacked, ema2, Double.NaN);
keySupportEMAUpper = if(areEMAsStacked, ema1, Double.NaN);
} 
else if (ema2supportCount >= ema1SupportCount and ema2supportCount >= ema3SupportCount and ema2supportCount >= ema4SupportCount and ema2supportCount >= ema5SupportCount) then {
keySupportEMA = emaPeriod3;
keySupportEMALower = if(areEMAsStacked, ema3, Double.NaN);
keySupportEMAUpper = if(areEMAsStacked, ema2, Double.NaN);
}
else if (ema3supportCount >= ema1SupportCount and ema3supportCount >= ema2SupportCount and ema3supportCount >= ema4SupportCount and ema3supportCount >= ema5SupportCount) then {
keySupportEMA = emaPeriod4;
keySupportEMALower = if(areEMAsStacked, ema4, Double.NaN);
keySupportEMAUpper = if(areEMAsStacked, ema3, Double.NaN);
}
else if (ema4supportCount >= ema1SupportCount and ema4supportCount >= ema2SupportCount and ema4supportCount >= ema3SupportCount and ema4supportCount >= ema5SupportCount) then {
keySupportEMA = emaPeriod5;
keySupportEMALower = if(areEMAsStacked, ema5, Double.NaN);
keySupportEMAUpper = if(areEMAsStacked, ema4, Double.NaN);
}
else {
keySupportEMA = emaPeriod1;
keySupportEMALower = if(areEMAsStacked, ema6, Double.NaN);
#keySupportEMAUpper = if(areEMAsStacked, ema5, Double.NaN);
keySupportEMAUpper = if(areEMAsStacked, if(close < open, close, open), Double.NaN);
}

AddLabel(yes, "Key Support: " + keySupportEMA + " EMA", if keySupportEMA == emaPeriod2 then GlobalColor("EMA2") else if keySupportEMA == emaPeriod3 then GlobalColor("EMA3") else if keySupportEMA == emaPeriod4 then GlobalColor("EMA4") else if keySupportEMA == emaPeriod5 then GlobalColor("EMA5") else GlobalColor("EMA6"));


AddCloud(if(keySupportEMA == emaPeriod1, keySupportEMAUpper, Double.NaN), if(keySupportEMA == emaPeriod1, keySupportEMALower, Double.NaN), GlobalColor("EMA1"));
AddCloud(if(keySupportEMA == emaPeriod2, keySupportEMAUpper, Double.NaN), if(keySupportEMA == emaPeriod2, keySupportEMALower, Double.NaN), GlobalColor("EMA2"));
AddCloud(if(keySupportEMA == emaPeriod3, keySupportEMAUpper, Double.NaN), if(keySupportEMA == emaPeriod3, keySupportEMALower, Double.NaN), GlobalColor("EMA3"));
AddCloud(if(keySupportEMA == emaPeriod4, keySupportEMAUpper, Double.NaN), if(keySupportEMA == emaPeriod4, keySupportEMALower, Double.NaN), GlobalColor("EMA4"));
AddCloud(if(keySupportEMA == emaPeriod5, keySupportEMAUpper, Double.NaN), if(keySupportEMA == emaPeriod5, keySupportEMALower, Double.NaN), GlobalColor("EMA5"));
AddCloud(if(keySupportEMA == emaPeriod6, keySupportEMAUpper, Double.NaN), if(keySupportEMA == emaPeriod6, keySupportEMALower, Double.NaN), GlobalColor("EMA6"));

#***********************************************************************
#Begin Buy Signal Section

def meetsBuyLevel = buyPrice > keySupportEMALower and buyPrice < keySupportEMAUpper;

def shouldBuy = (areEMAsStacked and meetsBuyLevel and isWithinTradingHours);

plot buySignal = if(showBuySignals, shouldBuy, no);
buySignal.SetPaintingStrategy(paintingStrategy = PaintingStrategy.BOOLEAN_ARROW_UP);
buySignal.SetDefaultColor(GlobalColor("BuySignal"));

Alert(enableAlerts and buySignal, "StackedEMAPullbackStrategy Buy Signal for " + GetSymbol(), sound = Sound.Ding);

plot buyCrossUpSignal = if(showBuyCrossUpSignal, ema1 crosses above ema2 and areEMAsStacked and isWithinTradingHours, no);
buyCrossUpSignal.SetPaintingStrategy(paintingStrategy = PaintingStrategy.BOOLEAN_ARROW_UP);
buyCrossUpSignal.SetDefaultColor(GlobalColor("BuyCrossUpSignal"));

Alert(enableAlerts and buyCrossUpSignal, "StackedEMAPullbackStrategy EMA1 Crossed Above EMA2 Buy Signal for " + GetSymbol(), sound = Sound.Ding);